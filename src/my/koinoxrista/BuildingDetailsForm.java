package my.koinoxrista;

import my.koinoxrista.utils.SqliteConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import my.koinoxrista.utils.MD5PasswordHasher;

public class BuildingDetailsForm extends javax.swing.JFrame {

    int _buildingId = 0;
    BuildingsListForm _parent = null;

    public BuildingDetailsForm() {
        initComponents();
    }

    public BuildingDetailsForm(int buildingId, BuildingsListForm parent) {
        initComponents();
        _buildingId = buildingId;
        _parent = parent;

        Connection connection = SqliteConnection.getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        String address = "";
        String city = "";
        String zipCode = "";
        String managerName = "";
        String managerPhone = "";
        String managerUsername = "";
        String managerPassword = ""; // This will be left blank, in case we need to change the manager's password

        if (_buildingId != 0) {
            String query = "select * from buildings where id = ?";
            try {
                pstmt = connection.prepareStatement(query);
                pstmt.setInt(1, _buildingId);
                rs = pstmt.executeQuery();
                while (rs.next()) {
                    address = rs.getString("address");
                    city = rs.getString("city");
                    zipCode = rs.getString("zip_code");
                    managerName = rs.getString("manager_name");
                    managerPhone = rs.getString("manager_phone");
                    managerUsername = rs.getString("manager_username");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (pstmt != null) {
                        pstmt.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }

        // Populate form with building data
        this.addressTextField.setText(address);
        this.cityTextField.setText(city);
        this.zipCodeTextField.setText(zipCode);
        this.managerNameTextField.setText(managerName);
        this.managerPhoneTextField.setText(managerPhone);
        this.managerUsernameTextField.setText(managerUsername);
        this.managerPasswordPasswordField.setText(managerPassword);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        zipCodeTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        managerNameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        managerPhoneTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        managerUsernameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        managerPasswordPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Διαχείριση Κοινοχρήστων - Επεξεργασία Πολυκατοικίας");

        jLabel1.setText("Διεύθυνση");

        jLabel2.setText("Πόλη");

        jLabel3.setText("Ταχυδρομικός Κώδικας");

        jLabel4.setText("Ονοματεπώνυμο Διαχειριστή");

        jLabel5.setText("Τηλέφωνο Διαχειριστή");

        saveButton.setText("Αποθήκευση");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Άκυρο");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Username Διαχειριστή");

        jLabel7.setText("Password Διαχειριστή");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 347, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(managerNameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(zipCodeTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cityTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addressTextField)
                            .addComponent(managerPhoneTextField)
                            .addComponent(managerUsernameTextField)
                            .addComponent(managerPasswordPasswordField, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(zipCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(managerPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Connection connection = SqliteConnection.getConnection();

        Statement stmt = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;

        if (_buildingId == 0) {
            // Create new building

            // Get next ID
            // Use COALESCE function to avoid problems with NULL value if there
            // are no buildings in the database.
            String query = "SELECT COALESCE(MAX(id), 100) AS max_id FROM buildings";
            int maxId = 100;
            try {
                stmt = connection.createStatement();
                rs = stmt.executeQuery(query);
                while (rs.next()) {
                    maxId = rs.getInt("max_id");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (stmt != null) {
                        stmt.close();
                    }
                    if (rs != null) {
                        rs.close();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

            query = "insert into buildings (id, address, city, zip_code, manager_name, manager_phone, manager_username, manager_password) values (?, ?, ?, ?, ?, ?, ?, ?)";

            try {
                String passwordHash = MD5PasswordHasher.hash(this.managerPasswordPasswordField.getText());

                pstmt = connection.prepareStatement(query);
                pstmt.setInt(1, maxId + 1);
                pstmt.setString(2, this.addressTextField.getText());
                pstmt.setString(3, this.cityTextField.getText());
                pstmt.setString(4, this.zipCodeTextField.getText());
                pstmt.setString(5, this.managerNameTextField.getText());
                pstmt.setString(6, this.managerPhoneTextField.getText());
                pstmt.setString(7, this.managerUsernameTextField.getText());
                pstmt.setString(8, passwordHash);
                pstmt.executeUpdate();
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (pstmt != null) {
                        pstmt.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            // Update new building
            String query = "update buildings set address = ?, city = ?, zip_code = ?, manager_name = ?, manager_phone = ?, manager_username = ?, manager_password = ? where id = ?";

            try {
                String passwordHash = MD5PasswordHasher.hash(this.managerPasswordPasswordField.getText());

                pstmt = connection.prepareStatement(query);
                pstmt.setString(1, this.addressTextField.getText());
                pstmt.setString(2, this.cityTextField.getText());
                pstmt.setString(3, this.zipCodeTextField.getText());
                pstmt.setString(4, this.managerNameTextField.getText());
                pstmt.setString(5, this.managerPhoneTextField.getText());
                pstmt.setString(6, this.managerUsernameTextField.getText());
                pstmt.setString(7, passwordHash);
                pstmt.setInt(8, _buildingId);
                pstmt.executeUpdate();
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (pstmt != null) {
                        pstmt.close();
                    }
                    if (connection != null) {
                        connection.close();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }

        _parent.updateBuildingsTable();
        this.setVisible(false);
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuildingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuildingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuildingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuildingDetailsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BuildingDetailsForm form = new BuildingDetailsForm();
                form.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField managerNameTextField;
    private javax.swing.JPasswordField managerPasswordPasswordField;
    private javax.swing.JTextField managerPhoneTextField;
    private javax.swing.JTextField managerUsernameTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField zipCodeTextField;
    // End of variables declaration//GEN-END:variables
}
