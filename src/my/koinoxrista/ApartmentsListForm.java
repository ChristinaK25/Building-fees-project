package my.koinoxrista;

import my.koinoxrista.utils.SqliteConnection;
import java.sql.*;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import my.koinoxrista.entities.Apartment;
import my.koinoxrista.entities.Building;
import my.koinoxrista.utils.SingleListSelectionModel;

public class ApartmentsListForm extends javax.swing.JFrame {

    int _buildingId = 0;
    Building _building = null;

    public ApartmentsListForm() {
        initComponents();
        updateApartmentsTable();
    }

    public ApartmentsListForm(int buildingId) {
        _buildingId = buildingId;
        _building = Building.getById(buildingId);

        initComponents();
        this.buildingInfoLabel.setText(_building.getDisplayName());
        updateApartmentsTable();
    }

    public void updateApartmentsTable() {
        Connection connection = SqliteConnection.getConnection();

        String query = "select * from apartments where building_id = ?";
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            pstmt = connection.prepareStatement(query);
            pstmt.setInt(1, _buildingId);
            rs = pstmt.executeQuery();
            DefaultTableModel dtm = buildTableModel(rs);
            this.apartmentsTable.setDefaultEditor(Object.class, null);
            this.apartmentsTable.setSelectionModel(new SingleListSelectionModel());
            this.apartmentsTable.setModel(dtm);
            dtm.fireTableDataChanged();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
                if (rs != null) {
                    rs.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    public static DefaultTableModel buildTableModel(ResultSet rs)
            throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        columnNames.add("ID Διαμερίσματος");
        columnNames.add("Κωδικός Πολυκατοικίας");
        columnNames.add("Όροφος");
        columnNames.add("Κωδικός Διαμερίσματος");
        columnNames.add("Ονοματεπώνυμο Ιδιοκτήτη");
        columnNames.add("Τετραγωνικά Μέτρα");
        columnNames.add("Τηλέφωνο Ιδιοκτήτη");
        columnNames.add("Χιλιοστά Διαμερίσματος");
        columnNames.add("Τύπος");

        // data of the table
        int columnCount = metaData.getColumnCount();
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();

            vector.add(rs.getInt("id"));
            vector.add(rs.getInt("building_id"));
            vector.add(rs.getInt("floor"));
            vector.add(rs.getString("code"));
            vector.add(rs.getString("owner_name"));
            vector.add(rs.getInt("surface"));
            vector.add(rs.getString("owner_phone"));
            vector.add(rs.getFloat("per_mille"));
            vector.add(Apartment.getTypeLiteral(rs.getString("type")));

            data.add(vector);
        }

        DefaultTableModel dtm = new DefaultTableModel(data, columnNames);

        return dtm;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        apartmentsTableContainer = new javax.swing.JScrollPane();
        apartmentsTable = new javax.swing.JTable();
        newRecordButton = new javax.swing.JButton();
        editRecordButton = new javax.swing.JButton();
        deleteRecordButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        returnToBuildingsListButton = new javax.swing.JButton();
        buildingInfoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Διαχείριση Κοινοχρήστων - Λίστα Διαμερισμάτων/Καταστημάτων");

        apartmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Κωδικός Πολυκατοικίας", "Διεύθυνση", "Πόλη", "Ταχυδρομικός Κώδικας", "Αριθμός Διαμερισμάτων", "Ονοματεπώνυμο Διαχειριστή", "Τηλέφωνο Διαχειριστή"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        apartmentsTableContainer.setViewportView(apartmentsTable);

        newRecordButton.setText("Νέα Εγγραφή");
        newRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRecordButtonActionPerformed(evt);
            }
        });

        editRecordButton.setText("Επεξεργασία Εγγραφής");
        editRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRecordButtonActionPerformed(evt);
            }
        });

        deleteRecordButton.setText("Διαγραφή Εγγραφής");
        deleteRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecordButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLabel.setText("Λίστα Διαμερισμάτων/Καταστημάτων");

        returnToBuildingsListButton.setText("Επιστροφή στη Λίστα Πολυκατοικιών");
        returnToBuildingsListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToBuildingsListButtonActionPerformed(evt);
            }
        });

        buildingInfoLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(apartmentsTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteRecordButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editRecordButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newRecordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(returnToBuildingsListButton))
                    .addComponent(buildingInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnToBuildingsListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildingInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apartmentsTableContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newRecordButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRecordButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteRecordButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRecordButtonActionPerformed
        ApartmentDetailsForm form = new ApartmentDetailsForm(0, _buildingId, this);
        form.setVisible(true);
    }//GEN-LAST:event_newRecordButtonActionPerformed

    private void editRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRecordButtonActionPerformed
        int row = this.apartmentsTable.getSelectedRow();

        // Check if user has actually selected an apartment to edit
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                    "Παρακαλώ επιλέξτε διαμέρισμα/κατάστημα για επεξεργασία.",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            // Get currently selected apartment ID
            int apartment_id = (int) this.apartmentsTable.getModel().getValueAt(row, 0);
            ApartmentDetailsForm form = new ApartmentDetailsForm(apartment_id, _buildingId, this);
            form.setVisible(true);
        }
    }//GEN-LAST:event_editRecordButtonActionPerformed

    private void deleteRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecordButtonActionPerformed
        int row = this.apartmentsTable.getSelectedRow();

        // Check if user has actually selected an apartment to delete
        if (row == -1) {
            JOptionPane.showMessageDialog(this,
                    "Παρακαλώ επιλέξτε διαμέρισμα/κατάστημα για διαγραφή.",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            Connection connection = null;
            PreparedStatement pstmt = null;

            int result = JOptionPane.showConfirmDialog(this,
                    "Είστε βέβαιοι πως επιθυμείτε να διαγράψετε το επιλεγμένο διαμέρισμα/κατάστημα;\n"
                    + "Η ενέργεια αυτή δεν μπορεί να αναιρεθεί.",
                    "Επιβεβαίωση Διαγραφής",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (result == 0) {
                int apartment_id = (int) this.apartmentsTable.getModel().getValueAt(row, 0);
                String query = "delete from apartments where id = ?";
                connection = SqliteConnection.getConnection();
                try {
                    pstmt = connection.prepareStatement(query);
                    pstmt.setInt(1, apartment_id);
                    pstmt.executeUpdate();
                } catch (Exception ex) {
                    ex.printStackTrace();
                } finally {
                    try {
                        if (pstmt != null) {
                            pstmt.close();
                        }
                        if (connection != null) {
                            connection.close();
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                this.updateApartmentsTable();
            }
        }
    }//GEN-LAST:event_deleteRecordButtonActionPerformed

    private void returnToBuildingsListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToBuildingsListButtonActionPerformed
        BuildingsListForm form = new BuildingsListForm();
        form.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_returnToBuildingsListButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApartmentsListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApartmentsListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApartmentsListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApartmentsListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApartmentsListForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable apartmentsTable;
    private javax.swing.JScrollPane apartmentsTableContainer;
    private javax.swing.JLabel buildingInfoLabel;
    private javax.swing.JButton deleteRecordButton;
    private javax.swing.JButton editRecordButton;
    private javax.swing.JButton newRecordButton;
    private javax.swing.JButton returnToBuildingsListButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
